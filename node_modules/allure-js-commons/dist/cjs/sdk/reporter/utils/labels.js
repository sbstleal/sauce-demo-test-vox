"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThreadLabel = exports.getHostLabel = exports.getEnvironmentLabels = void 0;
var _nodeOs = require("node:os");
var _nodeProcess = require("node:process");
var _model = require("../../../model.js");
var ENV_LABEL_PREFIX = "ALLURE_LABEL_";
var getEnvironmentLabels = () => {
  var result = [];
  for (var envKey in _nodeProcess.env) {
    if (envKey.startsWith(ENV_LABEL_PREFIX)) {
      var name = envKey.substring(ENV_LABEL_PREFIX.length).trim();
      if (name !== "") {
        result.push({
          name,
          value: process.env[envKey]
        });
      }
    }
  }
  return result;
};
exports.getEnvironmentLabels = getEnvironmentLabels;
var hostValue;
var getHostLabel = () => {
  if (!hostValue) {
    var _env$ALLURE_HOST_NAME;
    hostValue = (_env$ALLURE_HOST_NAME = _nodeProcess.env.ALLURE_HOST_NAME) !== null && _env$ALLURE_HOST_NAME !== void 0 ? _env$ALLURE_HOST_NAME : (0, _nodeOs.hostname)();
  }
  return {
    name: _model.LabelName.HOST,
    value: hostValue
  };
};
exports.getHostLabel = getHostLabel;
var getThreadLabel = threadId => {
  var _ref, _env$ALLURE_THREAD_NA;
  return {
    name: _model.LabelName.THREAD,
    value: (_ref = (_env$ALLURE_THREAD_NA = _nodeProcess.env.ALLURE_THREAD_NAME) !== null && _env$ALLURE_THREAD_NA !== void 0 ? _env$ALLURE_THREAD_NA : threadId) !== null && _ref !== void 0 ? _ref : _nodeProcess.pid.toString()
  };
};
exports.getThreadLabel = getThreadLabel;
//# sourceMappingURL=labels.js.map