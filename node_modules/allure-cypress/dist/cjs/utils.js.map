{"version":3,"file":"utils.js","names":["_allureJsCommons","require","_sdk","_model","uint8ArrayToBase64","data","u8arrayLike","Array","isArray","buffer","btoa","String","fromCharCode","apply","exports","getSuitePath","test","path","currentSuite","parent","title","unshift","isCommandShouldBeSkipped","command","_last","last","attributes","args","log","name","ALLURE_REPORT_STEP_COMMAND","toReversed","arr","result","i","length","push","isGlobalHook","hookName","getHookType","includes","isTestPresentInTestPlan","spec","testPlan","testFullName","concat","relative","titlePath","join","labels","extractMetadataFromString","allureIdLabel","find","_ref","LabelName","ALLURE_ID","tests","some","_ref2","id","selector","idMatched","value","selectorMatched"],"sources":["../../src/utils.ts"],"sourcesContent":["import { LabelName } from \"allure-js-commons\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport { extractMetadataFromString } from \"allure-js-commons/sdk\";\nimport type { CypressCommand } from \"./model.js\";\nimport { ALLURE_REPORT_STEP_COMMAND } from \"./model.js\";\n\nexport const uint8ArrayToBase64 = (data: unknown) => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (!u8arrayLike) {\n    return data as string;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  return btoa(String.fromCharCode.apply(null, data as number[]));\n};\n\nexport const getSuitePath = (test: Mocha.Test): string[] => {\n  const path: string[] = [];\n  let currentSuite: Mocha.Suite | undefined = test.parent;\n\n  while (currentSuite) {\n    if (currentSuite.title) {\n      path.unshift(currentSuite.title);\n    }\n\n    currentSuite = currentSuite.parent;\n  }\n\n  return path;\n};\n\nexport const isCommandShouldBeSkipped = (command: CypressCommand) => {\n  if (last(command.attributes.args)?.log === false) {\n    return true;\n  }\n\n  if (command.attributes.name === \"task\" && command.attributes.args[0] === \"allureReportTest\") {\n    return true;\n  }\n\n  // we don't need to report then commands because it's just a promise handle\n  if (command.attributes.name === \"then\") {\n    return true;\n  }\n\n  // we should skip artificial wrap from allure steps\n  if (command.attributes.name === \"wrap\" && command.attributes.args[0] === ALLURE_REPORT_STEP_COMMAND) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const toReversed = <T = unknown>(arr: T[]): T[] => {\n  const result: T[] = [];\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    result.push(arr[i]);\n  }\n\n  return result;\n};\n\nexport const isGlobalHook = (hookName: string) => {\n  return /(before|after) all/.test(hookName);\n};\n\nexport const getHookType = (hookName: string) => {\n  return hookName.includes(\"before\") ? \"before\" : \"after\";\n};\n\nexport const last = <T = unknown>(arr: T[]): T | undefined => {\n  return arr[arr.length - 1];\n};\n\nexport const isTestPresentInTestPlan = (\n  test: {\n    title: string;\n    titlePath: string[];\n  },\n  spec: Cypress.Spec,\n  testPlan: TestPlanV1,\n) => {\n  const testFullName = `${spec.relative}#${test.titlePath.join(\" \")}`;\n  const { labels } = extractMetadataFromString(test.title);\n  const allureIdLabel = labels.find(({ name }) => name === LabelName.ALLURE_ID);\n\n  return testPlan.tests.some(({ id, selector = \"\" }) => {\n    const idMatched = id ? String(id) === allureIdLabel?.value : false;\n    const selectorMatched = selector === testFullName;\n\n    return idMatched || selectorMatched;\n  });\n};\n"],"mappings":"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","ignoreList":[]}