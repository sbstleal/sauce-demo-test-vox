{"version":3,"file":"reporter.js","names":["_allureJsCommons","require","_sdk","_reporter","_utils","_excluded","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","call","hasOwnProperty","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","AllureCypress","constructor","config","Map","_ref","resultsDir","videoOnFailOnly","rest","allureRuntime","ReporterRuntime","writer","FileSystemWriter","createEmptyRunContext","absolutePath","runContextByAbsolutePath","set","executables","steps","scopes","globalHooksMessages","attachToCypress","on","readAllureTestPlan","_parseTestPlan","parseTestPlan","allureReportTest","_ref2","messages","messagesByAbsolutePath","allureReportSpec","spec","absolute","endSpec","endRun","result","runs","run","video","undefined","writeEnvironmentInfo","writeCategoriesDefinitions","cypressVideoPath","_this$messagesByAbsol","specMessages","get","runContext","isSpecFailed","some","message","type","data","status","Status","FAILED","BROKEN","shouldVideoBeAttached","_data","previousMessagesSlice","slice","lastHookMessage","toReversed","find","_ref3","scopeUuid","startScope","pop","writeScope","global","fixtureUuid","startFixture","last","name","start","updateFixture","stage","Stage","FINISHED","stop","statusDetails","stopFixture","suiteLabels","getSuiteLabels","specPath","testTitle","titleMetadata","extractMetadataFromString","testUuid","startTest","cleanTitle","fullName","concat","filename","join","RUNNING","labels","LabelName","LANGUAGE","FRAMEWORK","getEnvironmentLabels","updateTest","retries","parameters","toString","stopTest","writeTest","lastExecutableUuid","lastStepUuid","stepUuid","startStep","args","map","arg","j","updateStep","stopStep","applyRuntimeMessages","PASSED","writeAttachment","contentType","ContentType","MP4","exports","allureCypress","allureConfig","allureCypressReporter","results"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type Cypress from \"cypress\";\nimport { ContentType, LabelName, Stage, Status } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { extractMetadataFromString } from \"allure-js-commons/sdk\";\nimport {\n  FileSystemWriter,\n  ReporterRuntime,\n  getEnvironmentLabels,\n  getSuiteLabels,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport type {\n  AllureCypressConfig,\n  CypressHookEndMessage,\n  CypressHookStartMessage,\n  CypressMessage,\n  RunContextByAbsolutePath,\n} from \"./model.js\";\nimport { last, toReversed } from \"./utils.js\";\n\nexport class AllureCypress {\n  allureRuntime: ReporterRuntime;\n  messagesByAbsolutePath = new Map<string, CypressMessage[]>();\n  runContextByAbsolutePath = new Map<string, RunContextByAbsolutePath>();\n  globalHooksMessages: CypressMessage[] = [];\n  videoOnFailOnly: boolean = false;\n\n  constructor(config?: AllureCypressConfig) {\n    const { resultsDir = \"./allure-results\", videoOnFailOnly = false, ...rest } = config || {};\n\n    this.videoOnFailOnly = videoOnFailOnly;\n    this.allureRuntime = new ReporterRuntime({\n      writer: new FileSystemWriter({\n        resultsDir,\n      }),\n      ...rest,\n    });\n  }\n\n  createEmptyRunContext(absolutePath: string) {\n    this.runContextByAbsolutePath.set(absolutePath, {\n      executables: [],\n      steps: [],\n      scopes: [],\n      globalHooksMessages: [],\n    });\n  }\n\n  attachToCypress(on: Cypress.PluginEvents) {\n    on(\"task\", {\n      readAllureTestPlan: () => {\n        return parseTestPlan() ?? null;\n      },\n      allureReportTest: ({ messages, absolutePath }: { messages: CypressMessage[]; absolutePath: string }) => {\n        this.messagesByAbsolutePath.set(absolutePath, messages);\n\n        return null;\n      },\n      allureReportSpec: (spec: { absolute: string }) => {\n        this.createEmptyRunContext(spec.absolute);\n        this.endSpec(spec as Cypress.Spec);\n\n        return null;\n      },\n    });\n  }\n\n  endRun(result: CypressCommandLine.CypressRunResult) {\n    result.runs.forEach((run) => {\n      this.createEmptyRunContext(run.spec.absolute);\n      this.endSpec(run.spec, run.video || undefined);\n    });\n\n    this.allureRuntime.writeEnvironmentInfo();\n    this.allureRuntime.writeCategoriesDefinitions();\n  }\n\n  endSpec(spec: Cypress.Spec, cypressVideoPath?: string) {\n    const specMessages = this.messagesByAbsolutePath.get(spec.absolute) ?? [];\n    const runContext = this.runContextByAbsolutePath.get(spec.absolute)!;\n    const isSpecFailed = specMessages.some(\n      (message) =>\n        message.type === \"cypress_test_end\" &&\n        (message.data.status === Status.FAILED || message.data.status === Status.BROKEN),\n    );\n    const shouldVideoBeAttached = (!this.videoOnFailOnly || isSpecFailed) && cypressVideoPath;\n\n    specMessages.forEach((message, i) => {\n      // we add cypressTestId to messages where it's possible because the field is very useful to glue data\n      // @ts-ignore\n      const previousMessagesSlice = specMessages.slice(0, i);\n      const lastHookMessage = toReversed(previousMessagesSlice).find(\n        ({ type }) => type === \"cypress_hook_start\" || type === \"cypress_hook_end\",\n      ) as CypressHookStartMessage | CypressHookEndMessage;\n\n      if (message.type === \"cypress_suite_start\") {\n        const scopeUuid = this.allureRuntime.startScope();\n\n        runContext.scopes.push(scopeUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_suite_end\") {\n        const scopeUuid = runContext.scopes.pop()!;\n\n        this.allureRuntime.writeScope(scopeUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_hook_start\" && message.data.global) {\n        runContext.globalHooksMessages.push(message);\n        return;\n      }\n\n      if (message.type === \"cypress_hook_start\") {\n        const fixtureUuid = this.allureRuntime.startFixture(last(runContext.scopes)!, message.data.type, {\n          name: message.data.name,\n          start: message.data.start,\n        })!;\n\n        runContext.executables.push(fixtureUuid);\n        return;\n      }\n\n      if (\n        message.type === \"cypress_hook_end\" &&\n        (lastHookMessage as CypressHookEndMessage)?.data?.global &&\n        lastHookMessage?.type === \"cypress_hook_start\"\n      ) {\n        runContext.globalHooksMessages.push(message);\n        return;\n      }\n\n      if (message.type === \"cypress_hook_end\") {\n        const fixtureUuid = runContext.executables.pop()!;\n\n        this.allureRuntime.updateFixture(fixtureUuid, (r) => {\n          r.stage = Stage.FINISHED;\n          r.status = message.data.status;\n          r.stop = message.data.stop;\n\n          if (message.data.statusDetails) {\n            r.statusDetails = message.data.statusDetails;\n          }\n        });\n        this.allureRuntime.stopFixture(fixtureUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_test_start\") {\n        const suiteLabels = getSuiteLabels(message.data.specPath.slice(0, -1));\n        const testTitle = message.data.specPath[message.data.specPath.length - 1];\n        const titleMetadata = extractMetadataFromString(testTitle);\n        const testUuid = this.allureRuntime.startTest(\n          {\n            name: titleMetadata.cleanTitle || testTitle,\n            start: message.data.start,\n            fullName: `${message.data.filename}#${message.data.specPath.join(\" \")}`,\n            stage: Stage.RUNNING,\n            labels: [\n              {\n                name: LabelName.LANGUAGE,\n                value: \"javascript\",\n              },\n              {\n                name: LabelName.FRAMEWORK,\n                value: \"cypress\",\n              },\n              ...suiteLabels,\n              ...titleMetadata.labels,\n              ...getEnvironmentLabels(),\n            ],\n          },\n          runContext.scopes,\n        );\n\n        runContext.executables.push(testUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_test_end\") {\n        const testUuid = runContext.executables.pop()!;\n\n        this.allureRuntime.updateTest(testUuid, (result) => {\n          result.stage = Stage.FINISHED;\n          result.status = message.data.status;\n\n          if (message.data.retries > 0) {\n            result.parameters.push({\n              name: \"Retry\",\n              value: message.data.retries.toString(),\n            });\n          }\n\n          if (!message.data.statusDetails) {\n            return;\n          }\n\n          result.statusDetails = message.data.statusDetails;\n        });\n\n        this.allureRuntime.stopTest(testUuid);\n        this.allureRuntime.writeTest(testUuid);\n        return;\n      }\n\n      // we can get error when we try to attach screenshot to a failed test because there is no test due to error in hook\n      if (runContext.executables.length === 0) {\n        return;\n      }\n\n      if (message.type === \"cypress_command_start\") {\n        const lastExecutableUuid = last(runContext.executables)!;\n        const lastStepUuid = last(runContext.steps);\n        const stepUuid = this.allureRuntime.startStep(lastExecutableUuid, lastStepUuid, {\n          name: message.data.name,\n          parameters: message.data.args.map((arg, j) => ({\n            name: `Argument [${j}]`,\n            value: arg,\n          })),\n        })!;\n\n        runContext.steps.push(stepUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_command_end\") {\n        const stepUuid = runContext.steps.pop()!;\n\n        this.allureRuntime.updateStep(stepUuid, (r) => {\n          r.status = message.data.status;\n\n          if (message.data.statusDetails) {\n            r.statusDetails = message.data.statusDetails;\n          }\n        });\n        this.allureRuntime.stopStep(stepUuid);\n        return;\n      }\n\n      this.allureRuntime.applyRuntimeMessages(last(runContext.executables)!, [message] as RuntimeMessage[]);\n    });\n\n    if (shouldVideoBeAttached) {\n      const fixtureUuid = this.allureRuntime.startFixture(runContext.scopes[0], \"after\", {\n        name: \"Cypress video\",\n        status: Status.PASSED,\n        stage: Stage.FINISHED,\n      })!;\n      this.allureRuntime.writeAttachment(fixtureUuid, undefined, \"Cypress video\", cypressVideoPath, {\n        contentType: ContentType.MP4,\n      });\n      this.allureRuntime.stopFixture(fixtureUuid);\n    }\n\n    if (runContext.globalHooksMessages.length > 0) {\n      runContext.globalHooksMessages.forEach((message) => {\n        if (message.type === \"cypress_hook_start\") {\n          const fixtureUuid = this.allureRuntime.startFixture(runContext.scopes[0], message.data.type, {\n            name: message.data.name,\n            start: message.data.start,\n          })!;\n\n          runContext.executables.push(fixtureUuid);\n          return;\n        }\n\n        if (message.type === \"cypress_hook_end\") {\n          const fixtureUuid = runContext.executables.pop()!;\n\n          this.allureRuntime.updateFixture(fixtureUuid, (r) => {\n            r.status = message.data.status;\n            r.stop = message.data.stop;\n\n            if (message.data.statusDetails) {\n              r.statusDetails = message.data.statusDetails;\n            }\n          });\n          this.allureRuntime.stopFixture(fixtureUuid);\n        }\n      });\n    }\n\n    this.allureRuntime.writeScope(runContext.scopes.pop()!);\n  }\n}\n\nexport const allureCypress = (on: Cypress.PluginEvents, allureConfig?: AllureCypressConfig) => {\n  const allureCypressReporter = new AllureCypress(allureConfig);\n\n  allureCypressReporter.attachToCypress(on);\n\n  on(\"after:run\", (results) => {\n    allureCypressReporter.endRun(results as CypressCommandLine.CypressRunResult);\n  });\n\n  return allureCypressReporter;\n};\n"],"mappings":"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","ignoreList":[]}