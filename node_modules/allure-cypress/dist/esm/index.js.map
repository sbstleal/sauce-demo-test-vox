{
  "version": 3,
  "sources": ["../../../../.yarn/__virtual__/allure-js-commons-virtual-2327c51af9/1/packages/allure-js-commons/src/model.ts", "../../../../.yarn/__virtual__/allure-js-commons-virtual-2327c51af9/1/packages/allure-js-commons/src/sdk/runtime/NoopTestRuntime.ts", "../../../../.yarn/__virtual__/allure-js-commons-virtual-2327c51af9/1/packages/allure-js-commons/src/sdk/runtime/runtime.ts", "../../../../.yarn/__virtual__/allure-js-commons-virtual-2327c51af9/1/packages/allure-js-commons/src/sdk/utils.ts", "../../../../.yarn/__virtual__/allure-js-commons-virtual-2327c51af9/1/packages/allure-js-commons/src/facade.ts", "../../src/model.ts", "../../src/utils.ts", "../../src/index.ts"],
  "sourcesContent": ["export interface Attachment {\n  name: string;\n  type?: string;\n  source: string;\n}\n\nexport interface AttachmentOptions {\n  contentType: ContentType | string;\n  encoding?: BufferEncoding;\n  fileExtension?: string;\n}\n\nexport interface Label {\n  name: LabelName | string;\n  value: string;\n}\n\nexport interface Link {\n  name?: string;\n  url: string;\n  type?: LinkType | string;\n}\n\nexport type ParameterMode = \"hidden\" | \"masked\" | \"default\";\n\nexport interface Parameter {\n  name: string;\n  value: string;\n  excluded?: boolean;\n  mode?: ParameterMode;\n}\n\nexport type ParameterOptions = Pick<Parameter, \"mode\" | \"excluded\">;\n\nexport interface StatusDetails {\n  message?: string;\n  trace?: string;\n}\n\n// don't use the interface as is, use Results types instead\ninterface Executable {\n  name?: string;\n  status?: Status;\n  statusDetails: StatusDetails;\n  stage: Stage;\n  description?: string;\n  descriptionHtml?: string;\n  steps: StepResult[];\n  attachments: Attachment[];\n  parameters: Parameter[];\n  start?: number;\n  stop?: number;\n}\n\nexport interface FixtureResult extends Executable {}\n\nexport interface StepResult extends Executable {}\n\nexport interface TestResult extends Executable {\n  uuid: string;\n  historyId?: string;\n  fullName?: string;\n  testCaseId?: string;\n  labels: Label[];\n  links: Link[];\n}\n\nexport interface TestResultContainer {\n  uuid: string;\n  name?: string;\n  children: string[];\n  befores: FixtureResult[];\n  afters: FixtureResult[];\n}\n\nexport type TestOrStepResult = StepResult | TestResult;\n\n/* eslint-disable no-shadow */\nexport enum Status {\n  FAILED = \"failed\",\n  BROKEN = \"broken\",\n  PASSED = \"passed\",\n  SKIPPED = \"skipped\",\n}\n\nexport const StatusByPriority = [Status.FAILED, Status.BROKEN, Status.PASSED, Status.SKIPPED];\n\n/* eslint-disable no-shadow */\nexport enum Stage {\n  SCHEDULED = \"scheduled\",\n  RUNNING = \"running\",\n  FINISHED = \"finished\",\n  PENDING = \"pending\",\n  INTERRUPTED = \"interrupted\",\n}\n\n/* eslint-disable no-shadow */\nexport enum LabelName {\n  ALLURE_ID = \"ALLURE_ID\",\n  /**\n   * @deprecated please use ALLURE_ID instead\n   */\n  AS_ID = ALLURE_ID,\n  SUITE = \"suite\",\n  PARENT_SUITE = \"parentSuite\",\n  SUB_SUITE = \"subSuite\",\n  EPIC = \"epic\",\n  FEATURE = \"feature\",\n  STORY = \"story\",\n  SEVERITY = \"severity\",\n  TAG = \"tag\",\n  OWNER = \"owner\",\n  LEAD = \"lead\",\n  HOST = \"host\",\n  THREAD = \"thread\",\n  TEST_METHOD = \"testMethod\",\n  TEST_CLASS = \"testClass\",\n  PACKAGE = \"package\",\n  FRAMEWORK = \"framework\",\n  LANGUAGE = \"language\",\n  LAYER = \"layer\",\n}\n\n/* eslint-disable no-shadow */\nexport enum Severity {\n  BLOCKER = \"blocker\",\n  CRITICAL = \"critical\",\n  NORMAL = \"normal\",\n  MINOR = \"minor\",\n  TRIVIAL = \"trivial\",\n}\n\n/* eslint-disable no-shadow */\nexport enum ContentType {\n  TEXT = \"text/plain\",\n  XML = \"application/xml\",\n  HTML = \"text/html\",\n  CSV = \"text/csv\",\n  TSV = \"text/tab-separated-values\",\n  CSS = \"text/css\",\n  URI = \"text/uri-list\",\n  SVG = \"image/svg+xml\",\n  PNG = \"image/png\",\n  JSON = \"application/json\",\n  ZIP = \"application/zip\",\n  WEBM = \"video/webm\",\n  JPEG = \"image/jpeg\",\n  MP4 = \"video/mp4\",\n  IMAGEDIFF = \"application/vnd.allure.image.diff\",\n}\n\n/* eslint-disable no-shadow */\nexport enum LinkType {\n  DEFAULT = \"link\",\n  ISSUE = \"issue\",\n  TMS = \"tms\",\n}\n\nexport interface ImageDiffAttachment {\n  expected: string | undefined; // data:image;base64,\n  actual: string | undefined; // data:image;base64,\n  diff: string | undefined; // data:image;base64,\n  name: string;\n}\n", "import type { TestRuntime } from \"./types.js\";\n\nexport class NoopTestRuntime implements TestRuntime {\n  async attachment() {\n    await this.warning();\n  }\n\n  async attachmentFromPath() {\n    await this.warning();\n  }\n\n  async description() {\n    await this.warning();\n  }\n\n  async descriptionHtml() {\n    await this.warning();\n  }\n\n  async displayName() {\n    await this.warning();\n  }\n\n  async historyId() {\n    await this.warning();\n  }\n\n  async labels() {\n    await this.warning();\n  }\n\n  async links() {\n    await this.warning();\n  }\n\n  async parameter() {\n    await this.warning();\n  }\n\n  async logStep() {\n    await this.warning();\n  }\n\n  async step<T>(name: string, body: () => T | PromiseLike<T>): Promise<T> {\n    await this.warning();\n    return body();\n  }\n\n  async stepDisplayName() {\n    await this.warning();\n  }\n\n  async stepParameter() {\n    await this.warning();\n  }\n\n  async testCaseId() {\n    await this.warning();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async warning() {\n    // eslint-disable-next-line no-console\n    console.log(\"no test runtime is found. Please check test framework configuration\");\n  }\n}\n\nexport const noopRuntime: TestRuntime = new NoopTestRuntime();\n", "import { noopRuntime } from \"./NoopTestRuntime.js\";\nimport type { TestRuntime } from \"./types.js\";\n\nconst ALLURE_TEST_RUNTIME_KEY = \"allureTestRuntime\";\n\nexport const setGlobalTestRuntime = (runtime: TestRuntime) => {\n  (globalThis as any)[ALLURE_TEST_RUNTIME_KEY] = () => runtime;\n};\n\nconst getGlobalTestRuntimeFunction = () => {\n  return (globalThis as any)?.[ALLURE_TEST_RUNTIME_KEY] as (() => TestRuntime | undefined) | undefined;\n};\n\nexport const getGlobalTestRuntime = (): TestRuntime => {\n  const testRuntime = getGlobalTestRuntimeFunction();\n\n  if (testRuntime) {\n    return testRuntime() ?? noopRuntime;\n  }\n\n  return noopRuntime;\n};\n\nexport const getGlobalTestRuntimeWithAutoconfig = (): TestRuntime | Promise<TestRuntime> => {\n  const testRuntime = getGlobalTestRuntimeFunction();\n\n  if (testRuntime) {\n    return testRuntime() ?? noopRuntime;\n  }\n\n  if (\"_playwrightInstance\" in globalThis) {\n    try {\n      // protection from bundlers tree-shaking visiting (webpack, rollup)\n      // @ts-ignore\n      // eslint-disable-next-line no-eval\n      return (0, eval)(\"(() => import('allure-playwright/autoconfig'))()\").then(() => {\n        return getGlobalTestRuntimeFunction()?.() ?? noopRuntime;\n      });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(\"can't execute allure-playwright/autoconfig\", err);\n      return noopRuntime;\n    }\n  }\n\n  return noopRuntime;\n};\n", "import type { FixtureResult, Label, StatusDetails, StepResult, TestResult } from \"../model.js\";\nimport { LabelName, Status } from \"../model.js\";\nimport type { RuntimeMessage } from \"./types.js\";\n\nexport const getStatusFromError = (error: Error): Status => {\n  switch (true) {\n    /**\n     * Native `node:assert` and `chai` (`vitest` uses it under the hood) throw `AssertionError`\n     * `jest` throws `JestAssertionError` instance\n     * `jasmine` throws `ExpectationFailed` instance\n     */\n    case /assert/gi.test(error.constructor.name):\n    case /expectation/gi.test(error.constructor.name):\n    case /assert/gi.test(error.name):\n    case /assert/gi.test(error.message):\n      return Status.FAILED;\n    default:\n      return Status.BROKEN;\n  }\n};\n\n/**\n * Source: https://github.com/chalk/ansi-regex\n */\nconst ansiRegex = ({ onlyFirst = false } = {}) => {\n  const pattern = [\n    \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n    \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))\",\n  ].join(\"|\");\n\n  return new RegExp(pattern, onlyFirst ? undefined : \"g\");\n};\n\n/**\n * https://github.com/chalk/strip-ansi\n */\nexport const stripAnsi = (str: string): string => {\n  const regex = ansiRegex();\n  return str.replace(regex, \"\");\n};\n\nexport const getMessageAndTraceFromError = (\n  error: Error | { message?: string; stack?: string },\n): Pick<StatusDetails, \"message\" | \"trace\"> => {\n  const { message, stack } = error;\n  return {\n    message: message ? stripAnsi(message) : undefined,\n    trace: stack ? stripAnsi(stack) : undefined,\n  };\n};\n\nexport const allureIdRegexp = /(?:^|\\s)@?allure\\.id[:=](?<id>[^\\s]+)/;\nexport const allureIdRegexpGlobal = new RegExp(allureIdRegexp, \"g\");\nexport const allureLabelRegexp = /(?:^|\\s)@?allure\\.label\\.(?<name>[^:=\\s]+)[:=](?<value>[^\\s]+)/;\nexport const allureLabelRegexpGlobal = new RegExp(allureLabelRegexp, \"g\");\n\nexport const extractMetadataFromString = (\n  title: string,\n): {\n  labels: Label[];\n  cleanTitle: string;\n} => {\n  const labels = [] as Label[];\n\n  title.split(\" \").forEach((val) => {\n    const idValue = val.match(allureIdRegexp)?.groups?.id;\n\n    if (idValue) {\n      labels.push({ name: LabelName.ALLURE_ID, value: idValue });\n    }\n\n    const labelMatch = val.match(allureLabelRegexp);\n    const { name, value } = labelMatch?.groups || {};\n\n    if (name && value) {\n      labels?.push({ name, value });\n    }\n  });\n\n  const cleanTitle = title.replace(allureLabelRegexpGlobal, \"\").replace(allureIdRegexpGlobal, \"\").trim();\n\n  return { labels, cleanTitle };\n};\n\nexport const isAnyStepFailed = (item: StepResult | TestResult | FixtureResult): boolean => {\n  const isFailed = item.status === Status.FAILED;\n\n  if (isFailed || item.steps.length === 0) {\n    return isFailed;\n  }\n\n  return !!item.steps.find((step) => isAnyStepFailed(step));\n};\n\nexport const isAllStepsEnded = (item: StepResult | TestResult | FixtureResult): boolean => {\n  return item.steps.every((val) => val.stop && isAllStepsEnded(val));\n};\n\nexport const hasLabel = (testResult: TestResult, labelName: LabelName | string): boolean => {\n  return !!testResult.labels.find((l) => l.name === labelName);\n};\n\nexport const hasStepMessage = (messages: RuntimeMessage[]) => {\n  return messages.some((message) => message.type === \"step_start\" || message.type === \"step_stop\");\n};\n\nexport const getStepsMessagesPair = (messages: RuntimeMessage[]) =>\n  messages.reduce((acc, message) => {\n    if (message.type !== \"step_start\" && message.type !== \"step_stop\") {\n      return acc;\n    }\n\n    if (message.type === \"step_start\") {\n      acc.push([message]);\n\n      return acc;\n    }\n\n    const unfinishedStepIdx = acc.findLastIndex((step) => step.length === 1);\n\n    if (unfinishedStepIdx === -1) {\n      return acc;\n    }\n\n    acc[unfinishedStepIdx].push(message);\n\n    return acc;\n  }, [] as RuntimeMessage[][]);\n\nexport const getUnfinishedStepsMessages = (messages: RuntimeMessage[]) => {\n  const grouppedStepsMessage = getStepsMessagesPair(messages);\n\n  return grouppedStepsMessage.filter((step) => step.length === 1);\n};\n\nexport const isPromise = <T = any>(obj: any): obj is PromiseLike<T> =>\n  !!obj && (typeof obj === \"object\" || typeof obj === \"function\") && typeof obj.then === \"function\";\n", "import type { Status } from \"./model.js\";\nimport { type ContentType } from \"./model.js\";\nimport { type AttachmentOptions, type Label, type Link, type ParameterMode, type ParameterOptions } from \"./model.js\";\nimport { LabelName, LinkType } from \"./model.js\";\nimport { getGlobalTestRuntimeWithAutoconfig } from \"./sdk/runtime/runtime.js\";\nimport type { TestRuntime } from \"./sdk/runtime/types.js\";\nimport { isPromise } from \"./sdk/utils.js\";\n\nconst callRuntimeMethod = <\n  T extends keyof TestRuntime,\n  S extends Parameters<TestRuntime[T]>,\n  R extends ReturnType<TestRuntime[T]>,\n>(\n  method: T,\n  ...args: S\n): R => {\n  const runtime = getGlobalTestRuntimeWithAutoconfig();\n\n  if (!isPromise(runtime)) {\n    // @ts-ignore\n    return runtime[method](...args);\n  }\n\n  return runtime.then((testRuntime) => {\n    // @ts-ignore\n    return testRuntime[method](...args);\n  }) as R;\n};\n\nexport const label = (name: LabelName | string, value: string) => {\n  return callRuntimeMethod(\"labels\", { name, value });\n};\n\nexport const labels = (...labelsList: Label[]) => {\n  return callRuntimeMethod(\"labels\", ...labelsList);\n};\n\nexport const link = (url: string, name?: string, type?: LinkType | string) => {\n  return callRuntimeMethod(\"links\", { url, type, name });\n};\n\nexport const links = (...linksList: Link[]) => {\n  return callRuntimeMethod(\"links\", ...linksList);\n};\n\nexport const parameter = (name: string, value: string, options?: ParameterOptions) => {\n  return callRuntimeMethod(\"parameter\", name, value, options);\n};\n\nexport const description = (markdown: string) => {\n  return callRuntimeMethod(\"description\", markdown);\n};\n\nexport const descriptionHtml = (html: string) => {\n  return callRuntimeMethod(\"descriptionHtml\", html);\n};\n\nexport const displayName = (name: string) => {\n  return callRuntimeMethod(\"displayName\", name);\n};\n\nexport const historyId = (value: string) => {\n  return callRuntimeMethod(\"historyId\", value);\n};\n\nexport const testCaseId = (value: string) => {\n  return callRuntimeMethod(\"testCaseId\", value);\n};\n\nexport const attachment = (\n  name: string,\n  content: Buffer | string,\n  options: ContentType | string | AttachmentOptions,\n) => {\n  const opts = typeof options === \"string\" ? { contentType: options } : options;\n  return callRuntimeMethod(\"attachment\", name, content, opts);\n};\n\nexport const attachmentPath = (\n  name: string,\n  path: string,\n  options: ContentType | string | Omit<AttachmentOptions, \"encoding\">,\n) => {\n  const opts = typeof options === \"string\" ? { contentType: options } : options;\n  return callRuntimeMethod(\"attachmentFromPath\", name, path, opts);\n};\n\nexport type StepContext = {\n  displayName: (name: string) => void | PromiseLike<void>;\n  parameter: (name: string, value: string, mode?: ParameterMode) => void | PromiseLike<void>;\n};\n\nconst stepContext: () => StepContext = () => ({\n  displayName: (name: string) => {\n    return callRuntimeMethod(\"stepDisplayName\", name);\n  },\n  parameter: (name, value, mode?) => {\n    return callRuntimeMethod(\"stepParameter\", name, value, mode);\n  },\n});\n\nexport const logStep = (name: string, status?: Status, error?: Error): PromiseLike<void> => {\n  return callRuntimeMethod(\"logStep\", name, status, error);\n};\n\nexport const step = <T = void>(name: string, body: (context: StepContext) => T | PromiseLike<T>): PromiseLike<T> => {\n  return callRuntimeMethod(\"step\", name, () => body(stepContext()));\n};\n\nexport const issue = (url: string, name?: string) => link(url, name, LinkType.ISSUE);\n\nexport const tms = (url: string, name?: string) => link(url, name, LinkType.TMS);\n\nexport const allureId = (value: string) => label(LabelName.ALLURE_ID, value);\n\nexport const epic = (name: string) => label(LabelName.EPIC, name);\n\nexport const feature = (name: string) => label(LabelName.FEATURE, name);\n\nexport const story = (name: string) => label(LabelName.STORY, name);\n\nexport const suite = (name: string) => label(LabelName.SUITE, name);\n\nexport const parentSuite = (name: string) => label(LabelName.PARENT_SUITE, name);\n\nexport const subSuite = (name: string) => label(LabelName.SUB_SUITE, name);\n\nexport const owner = (name: string) => label(LabelName.OWNER, name);\n\nexport const severity = (name: string) => label(LabelName.SEVERITY, name);\n\nexport const layer = (name: string) => label(LabelName.LAYER, name);\n\nexport const tag = (name: string) => label(LabelName.TAG, name);\n\nexport const tags = (...tagsList: string[]) => {\n  return callRuntimeMethod(\"labels\", ...tagsList.map((value) => ({ name: LabelName.TAG, value })));\n};\n", "import type { Status, StatusDetails } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport type { Config } from \"allure-js-commons/sdk/reporter\";\n\nexport const ALLURE_REPORT_SYSTEM_HOOK = \"__allure_report_system_hook__\";\n\nexport const ALLURE_REPORT_STEP_COMMAND = \"__allure_report_step_command__\";\n\nexport type AllureCypressConfig = Config & {\n  videoOnFailOnly?: boolean;\n};\n\nexport type CypressTest = Mocha.Test & {\n  wallClockStartedAt?: Date;\n  hookName?: string;\n  id: string;\n};\n\nexport type CypressHook = Mocha.Hook & {\n  id: string;\n  hookId: string;\n  parent: Mocha.Suite & {\n    id: string;\n  };\n};\n\nexport type CypressCommand = {\n  attributes: {\n    name: string;\n    id: string;\n    args: any[];\n  };\n  state: \"passed\" | \"failed\" | \"queued\";\n};\n\nexport type CypressHookStartMessage = {\n  type: \"cypress_hook_start\";\n  data: {\n    id: string;\n    parentId: string;\n    name: string;\n    type: \"before\" | \"after\";\n    start: number;\n    global: boolean;\n  };\n};\n\nexport type CypressHookEndMessage = {\n  type: \"cypress_hook_end\";\n  data: {\n    id: string;\n    parentId: string;\n    status: Status;\n    statusDetails?: StatusDetails;\n    stop: number;\n    global: boolean;\n  };\n};\n\nexport type CypressSuiteStartMessage = {\n  type: \"cypress_suite_start\";\n  data: {\n    id: string;\n    name: string;\n    root?: boolean;\n  };\n};\n\nexport type CypressSuiteEndMessage = {\n  type: \"cypress_suite_end\";\n  data: {\n    id: string;\n    root?: boolean;\n  };\n};\n\nexport type CypressTestStartMessage = {\n  type: \"cypress_test_start\";\n  data: {\n    id: string;\n    specPath: string[];\n    filename: string;\n    start: number;\n  };\n};\n\nexport type CypressTestEndMessage = {\n  type: \"cypress_test_end\";\n  data: {\n    id: string;\n    status: Status;\n    statusDetails?: StatusDetails;\n    stop: number;\n    retries: number;\n  };\n};\n\nexport type CypressCommandStartMessage = {\n  type: \"cypress_command_start\";\n  data: {\n    id: string;\n    name: string;\n    args: string[];\n  };\n};\n\nexport type CypressCommandEndMessage = {\n  type: \"cypress_command_end\";\n  data: {\n    id: string;\n    status: Status;\n    statusDetails?: StatusDetails;\n  };\n};\n\nexport type CypressMessage =\n  | RuntimeMessage\n  | CypressTestStartMessage\n  | CypressTestEndMessage\n  | CypressHookStartMessage\n  | CypressHookEndMessage\n  | CypressSuiteStartMessage\n  | CypressSuiteEndMessage\n  | CypressCommandStartMessage\n  | CypressCommandEndMessage;\n\nexport type RunContextByAbsolutePath = {\n  executables: string[];\n  steps: string[];\n  scopes: string[];\n  globalHooksMessages: (CypressHookStartMessage | CypressHookEndMessage)[];\n};\n", "import { LabelName } from \"allure-js-commons\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport { extractMetadataFromString } from \"allure-js-commons/sdk\";\nimport type { CypressCommand } from \"./model.js\";\nimport { ALLURE_REPORT_STEP_COMMAND } from \"./model.js\";\n\nexport const uint8ArrayToBase64 = (data: unknown) => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (!u8arrayLike) {\n    return data as string;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  return btoa(String.fromCharCode.apply(null, data as number[]));\n};\n\nexport const getSuitePath = (test: Mocha.Test): string[] => {\n  const path: string[] = [];\n  let currentSuite: Mocha.Suite | undefined = test.parent;\n\n  while (currentSuite) {\n    if (currentSuite.title) {\n      path.unshift(currentSuite.title);\n    }\n\n    currentSuite = currentSuite.parent;\n  }\n\n  return path;\n};\n\nexport const isCommandShouldBeSkipped = (command: CypressCommand) => {\n  if (last(command.attributes.args)?.log === false) {\n    return true;\n  }\n\n  if (command.attributes.name === \"task\" && command.attributes.args[0] === \"allureReportTest\") {\n    return true;\n  }\n\n  // we don't need to report then commands because it's just a promise handle\n  if (command.attributes.name === \"then\") {\n    return true;\n  }\n\n  // we should skip artificial wrap from allure steps\n  if (command.attributes.name === \"wrap\" && command.attributes.args[0] === ALLURE_REPORT_STEP_COMMAND) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const toReversed = <T = unknown>(arr: T[]): T[] => {\n  const result: T[] = [];\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    result.push(arr[i]);\n  }\n\n  return result;\n};\n\nexport const isGlobalHook = (hookName: string) => {\n  return /(before|after) all/.test(hookName);\n};\n\nexport const getHookType = (hookName: string) => {\n  return hookName.includes(\"before\") ? \"before\" : \"after\";\n};\n\nexport const last = <T = unknown>(arr: T[]): T | undefined => {\n  return arr[arr.length - 1];\n};\n\nexport const isTestPresentInTestPlan = (\n  test: {\n    title: string;\n    titlePath: string[];\n  },\n  spec: Cypress.Spec,\n  testPlan: TestPlanV1,\n) => {\n  const testFullName = `${spec.relative}#${test.titlePath.join(\" \")}`;\n  const { labels } = extractMetadataFromString(test.title);\n  const allureIdLabel = labels.find(({ name }) => name === LabelName.ALLURE_ID);\n\n  return testPlan.tests.some(({ id, selector = \"\" }) => {\n    const idMatched = id ? String(id) === allureIdLabel?.value : false;\n    const selectorMatched = selector === testFullName;\n\n    return idMatched || selectorMatched;\n  });\n};\n", "import type { AttachmentOptions, Label, Link, ParameterMode, ParameterOptions, StatusDetails } from \"allure-js-commons\";\nimport { ContentType, Status } from \"allure-js-commons\";\nimport type { RuntimeMessage, TestPlanV1 } from \"allure-js-commons/sdk\";\nimport { getMessageAndTraceFromError, getUnfinishedStepsMessages, hasStepMessage } from \"allure-js-commons/sdk\";\nimport type { TestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport { getGlobalTestRuntime, setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type {\n  CypressCommand,\n  CypressCommandStartMessage,\n  CypressHook,\n  CypressHookStartMessage,\n  CypressMessage,\n  CypressTest,\n  CypressTestStartMessage,\n} from \"./model.js\";\nimport { ALLURE_REPORT_STEP_COMMAND, ALLURE_REPORT_SYSTEM_HOOK } from \"./model.js\";\nimport {\n  getHookType,\n  getSuitePath,\n  isCommandShouldBeSkipped,\n  isGlobalHook,\n  isTestPresentInTestPlan,\n  toReversed,\n  uint8ArrayToBase64,\n} from \"./utils.js\";\n\nexport class AllureCypressTestRuntime implements TestRuntime {\n  labels(...labels: Label[]) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        labels,\n      },\n    });\n  }\n\n  links(...links: Link[]) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        links,\n      },\n    });\n  }\n\n  parameter(name: string, value: string, options?: ParameterOptions) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        parameters: [\n          {\n            name,\n            value,\n            ...options,\n          },\n        ],\n      },\n    });\n  }\n\n  description(markdown: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        description: markdown,\n      },\n    });\n  }\n\n  descriptionHtml(html: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        descriptionHtml: html,\n      },\n    });\n  }\n\n  displayName(name: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        displayName: name,\n      },\n    });\n  }\n\n  historyId(value: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        historyId: value,\n      },\n    });\n  }\n\n  testCaseId(value: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        testCaseId: value,\n      },\n    });\n  }\n\n  // @ts-ignore\n  attachment(name: string, content: string, options: AttachmentOptions) {\n    // @ts-ignore\n    const attachmentRawContent: string | Uint8Array = content?.type === \"Buffer\" ? content.data : content;\n    const actualEncoding = typeof attachmentRawContent === \"string\" ? \"utf8\" : \"base64\";\n    const attachmentContent = uint8ArrayToBase64(attachmentRawContent);\n\n    return this.sendMessageAsync({\n      type: \"attachment_content\",\n      data: {\n        name,\n        content: attachmentContent,\n        encoding: actualEncoding,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  attachmentFromPath(name: string, path: string, options: Omit<AttachmentOptions, \"encoding\">) {\n    return this.sendMessageAsync({\n      type: \"attachment_path\",\n      data: {\n        name,\n        path,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  logStep(name: string, status: Status = Status.PASSED, error?: Error) {\n    return cy\n      .wrap(ALLURE_REPORT_STEP_COMMAND, { log: false })\n      .then(() => {\n        this.sendMessage({\n          type: \"step_start\",\n          data: {\n            name,\n            start: Date.now(),\n          },\n        });\n\n        return Cypress.Promise.resolve();\n      })\n      .then(() => {\n        return this.sendMessageAsync({\n          type: \"step_stop\",\n          data: {\n            status: status,\n            stop: Date.now(),\n            statusDetails: error ? { ...getMessageAndTraceFromError(error) } : undefined,\n          },\n        });\n      });\n  }\n\n  step<T = void>(name: string, body: () => T | PromiseLike<T>) {\n    return cy\n      .wrap(ALLURE_REPORT_STEP_COMMAND, { log: false })\n      .then(() => {\n        this.sendMessage({\n          type: \"step_start\",\n          data: {\n            name,\n            start: Date.now(),\n          },\n        });\n\n        return Cypress.Promise.resolve(body());\n      })\n      .then((result) => {\n        return this.sendMessageAsync({\n          type: \"step_stop\",\n          data: {\n            status: Status.PASSED,\n            stop: Date.now(),\n          },\n        }).then(() => result);\n      });\n  }\n\n  stepDisplayName(name: string) {\n    return this.sendMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        name,\n      },\n    });\n  }\n\n  stepParameter(name: string, value: string, mode?: ParameterMode) {\n    return this.sendMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        parameters: [{ name, value, mode }],\n      },\n    });\n  }\n\n  sendMessage(message: CypressMessage) {\n    const messages = Cypress.env(\"allureRuntimeMessages\") || [];\n\n    Cypress.env(\"allureRuntimeMessages\", messages.concat(message));\n  }\n\n  sendMessageAsync({ type, data }: CypressMessage): PromiseLike<void> {\n    this.sendMessage({\n      type,\n      data: {\n        ...data,\n        // a little hack to avoid additional types definition\n        // @ts-ignore\n        cypressTestId: Cypress.state(\"test\")?.id ?? \"\",\n      },\n    });\n\n    return Cypress.Promise.resolve();\n  }\n}\n\nconst {\n  EVENT_RUN_BEGIN,\n  EVENT_RUN_END,\n  EVENT_TEST_BEGIN,\n  EVENT_TEST_FAIL,\n  EVENT_TEST_PASS,\n  EVENT_TEST_PENDING,\n  EVENT_SUITE_BEGIN,\n  EVENT_SUITE_END,\n  EVENT_HOOK_BEGIN,\n  EVENT_HOOK_END,\n} = Mocha.Runner.constants;\n\nconst initializeAllure = () => {\n  const initialized = Cypress.env(\"allureInitialized\") as boolean;\n\n  if (initialized) {\n    return;\n  }\n\n  Cypress.env(\"allureInitialized\", true);\n\n  // @ts-ignore\n  Cypress.mocha\n    .getRunner()\n    .on(EVENT_RUN_BEGIN, () => {\n      const testRuntime = new AllureCypressTestRuntime();\n\n      Cypress.env(\"allureRuntimeMessages\", []);\n\n      // @ts-ignore\n      setGlobalTestRuntime(testRuntime);\n    })\n    .on(EVENT_HOOK_BEGIN, (hook: CypressHook) => {\n      if (hook.title.includes(ALLURE_REPORT_SYSTEM_HOOK)) {\n        return;\n      }\n\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n      // @ts-ignore\n      const testId: string | undefined = Cypress.state()?.test?.id;\n\n      testRuntime.sendMessageAsync({\n        type: \"cypress_hook_start\",\n        data: {\n          id: testId ? `${testId}:${hook.hookId}` : \"\",\n          parentId: hook.parent.id,\n          name: hook.title,\n          type: getHookType(hook.title),\n          start: Date.now(),\n          global: isGlobalHook(hook.title),\n        },\n      });\n    })\n    .on(EVENT_HOOK_END, (hook: CypressHook) => {\n      if (hook.title.includes(ALLURE_REPORT_SYSTEM_HOOK)) {\n        return;\n      }\n\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n      const runtimeMessages = Cypress.env(\"allureRuntimeMessages\") as CypressMessage[];\n      const hookStartMessage = toReversed(runtimeMessages).find(\n        ({ type }) => type === \"cypress_hook_start\",\n      ) as CypressHookStartMessage;\n\n      if (!hookStartMessage.data.id) {\n        hookStartMessage.data.id = `${hook.id}:${hook.hookId}`;\n      }\n\n      return testRuntime.sendMessageAsync({\n        type: \"cypress_hook_end\",\n        data: {\n          id: hookStartMessage.data.id,\n          parentId: hook.parent.id,\n          status: Status.PASSED,\n          stop: hookStartMessage.data.start + (hook.duration ?? 0),\n          global: isGlobalHook(hook.title),\n        },\n      });\n    })\n    .on(EVENT_SUITE_BEGIN, (suite: Mocha.Suite) => {\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n\n      return testRuntime.sendMessageAsync({\n        type: \"cypress_suite_start\",\n        data: {\n          id: suite.titlePath().join(\" \"),\n          name: suite.title,\n        },\n      });\n    })\n    .on(EVENT_SUITE_END, (suite: Mocha.Suite) => {\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n\n      return testRuntime.sendMessageAsync({\n        type: \"cypress_suite_end\",\n        data: {\n          id: suite.titlePath().join(\" \"),\n        },\n      });\n    })\n    .on(EVENT_TEST_BEGIN, (test: CypressTest) => {\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n\n      testRuntime.sendMessage({\n        type: \"cypress_test_start\",\n        data: {\n          id: test.id,\n          specPath: getSuitePath(test).concat(test.title),\n          filename: Cypress.spec.relative,\n          start: test.wallClockStartedAt?.getTime() || Date.now(),\n        },\n      });\n    })\n    .on(EVENT_TEST_PASS, (test: CypressTest) => {\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n      const runtimeMessages = Cypress.env(\"allureRuntimeMessages\") as RuntimeMessage[];\n      const unfinishedStepsMessages = getUnfinishedStepsMessages(runtimeMessages);\n      // @ts-ignore\n      const retries = test._retries ?? 0;\n\n      unfinishedStepsMessages.forEach(() => {\n        testRuntime.sendMessage({\n          type: \"step_stop\",\n          data: {\n            status: Status.PASSED,\n            stop: Date.now(),\n          },\n        });\n      });\n\n      testRuntime.sendMessage({\n        type: \"cypress_test_end\",\n        data: {\n          id: test.id,\n          status: Status.PASSED,\n          stop: Date.now(),\n          retries,\n        },\n      });\n    })\n    .on(EVENT_TEST_FAIL, (test: CypressTest, err: Error) => {\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n      const runtimeMessages = Cypress.env(\"allureRuntimeMessages\") as CypressMessage[];\n      const startCommandMessageIdx = runtimeMessages\n        .toReversed()\n        .findIndex(({ type }) => type === \"cypress_command_start\");\n      const stopCommandMessageIdx = runtimeMessages\n        .toReversed()\n        .findIndex(({ type }) => type === \"cypress_command_end\");\n      const hasUnfinishedCommand = startCommandMessageIdx > stopCommandMessageIdx;\n      const status = err.constructor.name === \"AssertionError\" ? Status.FAILED : Status.BROKEN;\n      const statusDetails: StatusDetails = {\n        message: err.message,\n        trace: err.stack,\n      };\n      // @ts-ignore\n      const retries = test._retries ?? 0;\n\n      if (hasUnfinishedCommand) {\n        testRuntime.sendMessage({\n          type: \"cypress_command_end\",\n          data: {\n            id: (runtimeMessages[startCommandMessageIdx] as CypressCommandStartMessage).data.id,\n            status,\n            statusDetails,\n          },\n        });\n      }\n\n      if (test.hookName) {\n        const hookStartMessage = runtimeMessages\n          .toReversed()\n          .find(({ type }) => type === \"cypress_hook_start\") as CypressHookStartMessage;\n\n        return testRuntime.sendMessageAsync({\n          type: \"cypress_hook_end\",\n          data: {\n            id: hookStartMessage.data.id,\n            status,\n            statusDetails,\n            stop: hookStartMessage.data.start + (test.duration ?? 0),\n            parentId: hookStartMessage.data.parentId,\n            global: isGlobalHook(test.hookName),\n          },\n        });\n      }\n\n      // the test hasn't been even started (rather due to hook error), so we need to start it manually\n      if (!test.hookName && test.wallClockStartedAt === undefined) {\n        testRuntime.sendMessage({\n          type: \"cypress_test_start\",\n          data: {\n            id: test.id,\n            specPath: getSuitePath(test).concat(test.title),\n            filename: Cypress.spec.relative,\n            start: Date.now(),\n          },\n        });\n      }\n\n      const testStartMessage = toReversed(runtimeMessages).find(\n        ({ type }) => type === \"cypress_test_start\",\n      ) as CypressTestStartMessage;\n\n      testRuntime.sendMessage({\n        type: \"cypress_test_end\",\n        data: {\n          id: test.id,\n          status,\n          statusDetails,\n          stop: testStartMessage.data.start + (test.duration ?? 0),\n          retries,\n        },\n      });\n    })\n    .on(EVENT_TEST_PENDING, (test: CypressTest) => {\n      const testRuntime = new AllureCypressTestRuntime();\n      const testPlan = Cypress.env(\"allureTestPlan\") as TestPlanV1;\n\n      if (testPlan && !isTestPresentInTestPlan(Cypress.currentTest, Cypress.spec, testPlan)) {\n        return;\n      }\n\n      // @ts-ignore\n      const retries = test._retries ?? 0;\n\n      testRuntime.sendMessageAsync({\n        type: \"cypress_test_start\",\n        data: {\n          id: test.id,\n          specPath: getSuitePath(test).concat(test.title),\n          filename: Cypress.spec.relative,\n          start: Date.now(),\n        },\n      });\n\n      return testRuntime.sendMessageAsync({\n        type: \"cypress_test_end\",\n        data: {\n          id: test.id,\n          status: Status.SKIPPED,\n          stop: Date.now(),\n          retries,\n        },\n      });\n    })\n    .on(EVENT_RUN_END, () => {\n      // this is the only way to say reporter process messages in interactive mode without data duplication\n      if (Cypress.config(\"isInteractive\")) {\n        cy.task(\"allureReportSpec\", { absolute: Cypress.spec.absolute });\n      }\n    });\n\n  Cypress.Screenshot.defaults({\n    onAfterScreenshot: (_, details) => {\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n\n      return testRuntime.sendMessageAsync({\n        type: \"attachment_path\",\n        data: {\n          path: details.path,\n          name: details.name || \"Screenshot\",\n          contentType: ContentType.PNG,\n        },\n      });\n    },\n  });\n\n  Cypress.on(\"fail\", (err) => {\n    const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n    const runtimeMessages = Cypress.env(\"allureRuntimeMessages\") as RuntimeMessage[];\n    const hasSteps = hasStepMessage(runtimeMessages);\n\n    // if there is no steps, don't handle the error\n    if (!hasSteps) {\n      throw err;\n    }\n\n    const unfinishedStepsMessages = getUnfinishedStepsMessages(runtimeMessages);\n\n    if (unfinishedStepsMessages.length === 0) {\n      throw err;\n    }\n\n    const failedStepsStatus = err.constructor.name === \"AssertionError\" ? Status.FAILED : Status.BROKEN;\n\n    unfinishedStepsMessages.forEach(() => {\n      testRuntime.sendMessage({\n        type: \"step_stop\",\n        data: {\n          status: failedStepsStatus,\n          stop: Date.now(),\n          statusDetails: {\n            message: err.message,\n            trace: err.stack,\n          },\n        },\n      });\n    });\n\n    throw err;\n  });\n  Cypress.on(\"command:start\", (command: CypressCommand) => {\n    if (isCommandShouldBeSkipped(command)) {\n      return;\n    }\n\n    const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n\n    return testRuntime.sendMessageAsync({\n      type: \"cypress_command_start\",\n      data: {\n        id: command.attributes.id,\n        name: `Command \"${command.attributes.name}\"`,\n        args: command.attributes.args.map((arg) => (typeof arg === \"string\" ? arg : JSON.stringify(arg, null, 2))),\n      },\n    });\n  });\n  Cypress.on(\"command:end\", (command: CypressCommand) => {\n    if (isCommandShouldBeSkipped(command)) {\n      return;\n    }\n\n    const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n\n    return testRuntime.sendMessageAsync({\n      type: \"cypress_command_end\",\n      data: {\n        id: command.attributes.id,\n        status: Status.PASSED,\n      },\n    });\n  });\n\n  before(ALLURE_REPORT_SYSTEM_HOOK, () => {\n    cy.task(\"readAllureTestPlan\", {}, { log: false }).then((testPlan) => {\n      if (!testPlan) {\n        return;\n      }\n\n      Cypress.env(\"allureTestPlan\", testPlan);\n    });\n  });\n\n  beforeEach(ALLURE_REPORT_SYSTEM_HOOK, function () {\n    const testPlan = Cypress.env(\"allureTestPlan\") as TestPlanV1;\n\n    if (!testPlan) {\n      return;\n    }\n\n    if (!isTestPresentInTestPlan(Cypress.currentTest, Cypress.spec, testPlan)) {\n      this.skip();\n    }\n  });\n\n  after(ALLURE_REPORT_SYSTEM_HOOK, () => {\n    const runtimeMessages = Cypress.env(\"allureRuntimeMessages\") as CypressMessage[];\n\n    cy.task(\n      \"allureReportTest\",\n      { absolutePath: Cypress.spec.absolute, messages: runtimeMessages ?? [] },\n      { log: false },\n    );\n  });\n};\n\ninitializeAllure();\n\nexport * from \"allure-js-commons\";\n"],
  "mappings": "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",
  "names": ["Status", "StatusByPriority", "FAILED", "BROKEN", "PASSED", "SKIPPED", "Stage", "LabelName", "Severity", "ContentType", "LinkType", "NoopTestRuntime", "attachment", "_this", "_asyncToGenerator", "warning", "attachmentFromPath", "_this2", "description", "_this3", "descriptionHtml", "_this4", "displayName", "_this5", "historyId", "_this6", "labels", "_this7", "links", "_this8", "parameter", "_this9", "logStep", "_this10", "step", "name", "body", "_this11", "stepDisplayName", "_this12", "stepParameter", "_this13", "testCaseId", "_this14", "console", "log", "noopRuntime", "ALLURE_TEST_RUNTIME_KEY", "setGlobalTestRuntime", "runtime", "globalThis", "getGlobalTestRuntimeFunction", "getGlobalTestRuntime", "testRuntime", "_testRuntime", "noopRuntime", "getGlobalTestRuntimeWithAutoconfig", "_testRuntime2", "eval", "then", "_getGlobalTestRuntime", "_getGlobalTestRuntime2", "err", "console", "log", "ansiRegex", "onlyFirst", "arguments", "length", "undefined", "pattern", "join", "RegExp", "stripAnsi", "str", "regex", "replace", "getMessageAndTraceFromError", "error", "message", "stack", "trace", "allureIdRegexp", "_wrapRegExp", "id", "allureIdRegexpGlobal", "allureLabelRegexp", "name", "value", "allureLabelRegexpGlobal", "extractMetadataFromString", "title", "labels", "split", "forEach", "val", "_val$match", "idValue", "match", "groups", "push", "LabelName", "ALLURE_ID", "labelMatch", "cleanTitle", "trim", "hasStepMessage", "messages", "some", "message", "type", "getStepsMessagesPair", "reduce", "acc", "push", "unfinishedStepIdx", "findLastIndex", "step", "length", "getUnfinishedStepsMessages", "grouppedStepsMessage", "filter", "isPromise", "obj", "then", "callRuntimeMethod", "method", "_len", "arguments", "length", "args", "Array", "_key", "runtime", "getGlobalTestRuntimeWithAutoconfig", "isPromise", "then", "testRuntime", "label", "name", "value", "labels", "_len2", "labelsList", "_key2", "link", "url", "type", "links", "_len3", "linksList", "_key3", "parameter", "options", "description", "markdown", "descriptionHtml", "html", "displayName", "historyId", "testCaseId", "attachment", "content", "opts", "contentType", "attachmentPath", "path", "stepContext", "mode", "logStep", "status", "error", "step", "body", "issue", "LinkType", "ISSUE", "tms", "TMS", "allureId", "LabelName", "ALLURE_ID", "epic", "EPIC", "feature", "FEATURE", "story", "STORY", "suite", "SUITE", "parentSuite", "PARENT_SUITE", "subSuite", "SUB_SUITE", "owner", "OWNER", "severity", "SEVERITY", "layer", "LAYER", "tag", "TAG", "tags", "_len4", "tagsList", "_key4", "map", "ALLURE_REPORT_SYSTEM_HOOK", "ALLURE_REPORT_STEP_COMMAND", "uint8ArrayToBase64", "data", "getSuitePath", "test", "path", "currentSuite", "isCommandShouldBeSkipped", "command", "last", "ALLURE_REPORT_STEP_COMMAND", "toReversed", "arr", "result", "i", "isGlobalHook", "hookName", "getHookType", "isTestPresentInTestPlan", "spec", "testPlan", "testFullName", "labels", "extractMetadataFromString", "allureIdLabel", "name", "LabelName", "id", "selector", "AllureCypressTestRuntime", "labels", "links", "name", "value", "options", "markdown", "html", "content", "attachmentRawContent", "actualEncoding", "attachmentContent", "uint8ArrayToBase64", "path", "status", "Status", "error", "ALLURE_REPORT_STEP_COMMAND", "getMessageAndTraceFromError", "body", "result", "mode", "message", "messages", "type", "data", "EVENT_RUN_BEGIN", "EVENT_RUN_END", "EVENT_TEST_BEGIN", "EVENT_TEST_FAIL", "EVENT_TEST_PASS", "EVENT_TEST_PENDING", "EVENT_SUITE_BEGIN", "EVENT_SUITE_END", "EVENT_HOOK_BEGIN", "EVENT_HOOK_END", "initializeAllure", "testRuntime", "setGlobalTestRuntime", "hook", "ALLURE_REPORT_SYSTEM_HOOK", "getGlobalTestRuntime", "testId", "getHookType", "isGlobalHook", "runtimeMessages", "hookStartMessage", "toReversed", "suite", "test", "getSuitePath", "unfinishedStepsMessages", "getUnfinishedStepsMessages", "retries", "err", "startCommandMessageIdx", "stopCommandMessageIdx", "hasUnfinishedCommand", "statusDetails", "testStartMessage", "testPlan", "isTestPresentInTestPlan", "_", "details", "ContentType", "hasStepMessage", "failedStepsStatus", "command", "isCommandShouldBeSkipped", "arg"]
}
