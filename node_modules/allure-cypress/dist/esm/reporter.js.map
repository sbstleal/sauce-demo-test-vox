{"version":3,"file":"reporter.js","names":["ContentType","LabelName","Stage","Status","extractMetadataFromString","FileSystemWriter","ReporterRuntime","getEnvironmentLabels","getSuiteLabels","parseTestPlan","last","toReversed","AllureCypress","constructor","config","_defineProperty","Map","_ref","resultsDir","videoOnFailOnly","rest","_objectWithoutProperties","_excluded","allureRuntime","_objectSpread","writer","createEmptyRunContext","absolutePath","runContextByAbsolutePath","set","executables","steps","scopes","globalHooksMessages","attachToCypress","on","readAllureTestPlan","_parseTestPlan","allureReportTest","_ref2","messages","messagesByAbsolutePath","allureReportSpec","spec","absolute","endSpec","endRun","result","runs","forEach","run","video","undefined","writeEnvironmentInfo","writeCategoriesDefinitions","cypressVideoPath","_this$messagesByAbsol","specMessages","get","runContext","isSpecFailed","some","message","type","data","status","FAILED","BROKEN","shouldVideoBeAttached","i","_data","previousMessagesSlice","slice","lastHookMessage","find","_ref3","scopeUuid","startScope","push","pop","writeScope","global","fixtureUuid","startFixture","name","start","updateFixture","r","stage","FINISHED","stop","statusDetails","stopFixture","suiteLabels","specPath","testTitle","length","titleMetadata","testUuid","startTest","cleanTitle","fullName","concat","filename","join","RUNNING","labels","LANGUAGE","value","FRAMEWORK","updateTest","retries","parameters","toString","stopTest","writeTest","lastExecutableUuid","lastStepUuid","stepUuid","startStep","args","map","arg","j","updateStep","stopStep","applyRuntimeMessages","PASSED","writeAttachment","contentType","MP4","allureCypress","allureConfig","allureCypressReporter","results"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type Cypress from \"cypress\";\nimport { ContentType, LabelName, Stage, Status } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { extractMetadataFromString } from \"allure-js-commons/sdk\";\nimport {\n  FileSystemWriter,\n  ReporterRuntime,\n  getEnvironmentLabels,\n  getSuiteLabels,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport type {\n  AllureCypressConfig,\n  CypressHookEndMessage,\n  CypressHookStartMessage,\n  CypressMessage,\n  RunContextByAbsolutePath,\n} from \"./model.js\";\nimport { last, toReversed } from \"./utils.js\";\n\nexport class AllureCypress {\n  allureRuntime: ReporterRuntime;\n  messagesByAbsolutePath = new Map<string, CypressMessage[]>();\n  runContextByAbsolutePath = new Map<string, RunContextByAbsolutePath>();\n  globalHooksMessages: CypressMessage[] = [];\n  videoOnFailOnly: boolean = false;\n\n  constructor(config?: AllureCypressConfig) {\n    const { resultsDir = \"./allure-results\", videoOnFailOnly = false, ...rest } = config || {};\n\n    this.videoOnFailOnly = videoOnFailOnly;\n    this.allureRuntime = new ReporterRuntime({\n      writer: new FileSystemWriter({\n        resultsDir,\n      }),\n      ...rest,\n    });\n  }\n\n  createEmptyRunContext(absolutePath: string) {\n    this.runContextByAbsolutePath.set(absolutePath, {\n      executables: [],\n      steps: [],\n      scopes: [],\n      globalHooksMessages: [],\n    });\n  }\n\n  attachToCypress(on: Cypress.PluginEvents) {\n    on(\"task\", {\n      readAllureTestPlan: () => {\n        return parseTestPlan() ?? null;\n      },\n      allureReportTest: ({ messages, absolutePath }: { messages: CypressMessage[]; absolutePath: string }) => {\n        this.messagesByAbsolutePath.set(absolutePath, messages);\n\n        return null;\n      },\n      allureReportSpec: (spec: { absolute: string }) => {\n        this.createEmptyRunContext(spec.absolute);\n        this.endSpec(spec as Cypress.Spec);\n\n        return null;\n      },\n    });\n  }\n\n  endRun(result: CypressCommandLine.CypressRunResult) {\n    result.runs.forEach((run) => {\n      this.createEmptyRunContext(run.spec.absolute);\n      this.endSpec(run.spec, run.video || undefined);\n    });\n\n    this.allureRuntime.writeEnvironmentInfo();\n    this.allureRuntime.writeCategoriesDefinitions();\n  }\n\n  endSpec(spec: Cypress.Spec, cypressVideoPath?: string) {\n    const specMessages = this.messagesByAbsolutePath.get(spec.absolute) ?? [];\n    const runContext = this.runContextByAbsolutePath.get(spec.absolute)!;\n    const isSpecFailed = specMessages.some(\n      (message) =>\n        message.type === \"cypress_test_end\" &&\n        (message.data.status === Status.FAILED || message.data.status === Status.BROKEN),\n    );\n    const shouldVideoBeAttached = (!this.videoOnFailOnly || isSpecFailed) && cypressVideoPath;\n\n    specMessages.forEach((message, i) => {\n      // we add cypressTestId to messages where it's possible because the field is very useful to glue data\n      // @ts-ignore\n      const previousMessagesSlice = specMessages.slice(0, i);\n      const lastHookMessage = toReversed(previousMessagesSlice).find(\n        ({ type }) => type === \"cypress_hook_start\" || type === \"cypress_hook_end\",\n      ) as CypressHookStartMessage | CypressHookEndMessage;\n\n      if (message.type === \"cypress_suite_start\") {\n        const scopeUuid = this.allureRuntime.startScope();\n\n        runContext.scopes.push(scopeUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_suite_end\") {\n        const scopeUuid = runContext.scopes.pop()!;\n\n        this.allureRuntime.writeScope(scopeUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_hook_start\" && message.data.global) {\n        runContext.globalHooksMessages.push(message);\n        return;\n      }\n\n      if (message.type === \"cypress_hook_start\") {\n        const fixtureUuid = this.allureRuntime.startFixture(last(runContext.scopes)!, message.data.type, {\n          name: message.data.name,\n          start: message.data.start,\n        })!;\n\n        runContext.executables.push(fixtureUuid);\n        return;\n      }\n\n      if (\n        message.type === \"cypress_hook_end\" &&\n        (lastHookMessage as CypressHookEndMessage)?.data?.global &&\n        lastHookMessage?.type === \"cypress_hook_start\"\n      ) {\n        runContext.globalHooksMessages.push(message);\n        return;\n      }\n\n      if (message.type === \"cypress_hook_end\") {\n        const fixtureUuid = runContext.executables.pop()!;\n\n        this.allureRuntime.updateFixture(fixtureUuid, (r) => {\n          r.stage = Stage.FINISHED;\n          r.status = message.data.status;\n          r.stop = message.data.stop;\n\n          if (message.data.statusDetails) {\n            r.statusDetails = message.data.statusDetails;\n          }\n        });\n        this.allureRuntime.stopFixture(fixtureUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_test_start\") {\n        const suiteLabels = getSuiteLabels(message.data.specPath.slice(0, -1));\n        const testTitle = message.data.specPath[message.data.specPath.length - 1];\n        const titleMetadata = extractMetadataFromString(testTitle);\n        const testUuid = this.allureRuntime.startTest(\n          {\n            name: titleMetadata.cleanTitle || testTitle,\n            start: message.data.start,\n            fullName: `${message.data.filename}#${message.data.specPath.join(\" \")}`,\n            stage: Stage.RUNNING,\n            labels: [\n              {\n                name: LabelName.LANGUAGE,\n                value: \"javascript\",\n              },\n              {\n                name: LabelName.FRAMEWORK,\n                value: \"cypress\",\n              },\n              ...suiteLabels,\n              ...titleMetadata.labels,\n              ...getEnvironmentLabels(),\n            ],\n          },\n          runContext.scopes,\n        );\n\n        runContext.executables.push(testUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_test_end\") {\n        const testUuid = runContext.executables.pop()!;\n\n        this.allureRuntime.updateTest(testUuid, (result) => {\n          result.stage = Stage.FINISHED;\n          result.status = message.data.status;\n\n          if (message.data.retries > 0) {\n            result.parameters.push({\n              name: \"Retry\",\n              value: message.data.retries.toString(),\n            });\n          }\n\n          if (!message.data.statusDetails) {\n            return;\n          }\n\n          result.statusDetails = message.data.statusDetails;\n        });\n\n        this.allureRuntime.stopTest(testUuid);\n        this.allureRuntime.writeTest(testUuid);\n        return;\n      }\n\n      // we can get error when we try to attach screenshot to a failed test because there is no test due to error in hook\n      if (runContext.executables.length === 0) {\n        return;\n      }\n\n      if (message.type === \"cypress_command_start\") {\n        const lastExecutableUuid = last(runContext.executables)!;\n        const lastStepUuid = last(runContext.steps);\n        const stepUuid = this.allureRuntime.startStep(lastExecutableUuid, lastStepUuid, {\n          name: message.data.name,\n          parameters: message.data.args.map((arg, j) => ({\n            name: `Argument [${j}]`,\n            value: arg,\n          })),\n        })!;\n\n        runContext.steps.push(stepUuid);\n        return;\n      }\n\n      if (message.type === \"cypress_command_end\") {\n        const stepUuid = runContext.steps.pop()!;\n\n        this.allureRuntime.updateStep(stepUuid, (r) => {\n          r.status = message.data.status;\n\n          if (message.data.statusDetails) {\n            r.statusDetails = message.data.statusDetails;\n          }\n        });\n        this.allureRuntime.stopStep(stepUuid);\n        return;\n      }\n\n      this.allureRuntime.applyRuntimeMessages(last(runContext.executables)!, [message] as RuntimeMessage[]);\n    });\n\n    if (shouldVideoBeAttached) {\n      const fixtureUuid = this.allureRuntime.startFixture(runContext.scopes[0], \"after\", {\n        name: \"Cypress video\",\n        status: Status.PASSED,\n        stage: Stage.FINISHED,\n      })!;\n      this.allureRuntime.writeAttachment(fixtureUuid, undefined, \"Cypress video\", cypressVideoPath, {\n        contentType: ContentType.MP4,\n      });\n      this.allureRuntime.stopFixture(fixtureUuid);\n    }\n\n    if (runContext.globalHooksMessages.length > 0) {\n      runContext.globalHooksMessages.forEach((message) => {\n        if (message.type === \"cypress_hook_start\") {\n          const fixtureUuid = this.allureRuntime.startFixture(runContext.scopes[0], message.data.type, {\n            name: message.data.name,\n            start: message.data.start,\n          })!;\n\n          runContext.executables.push(fixtureUuid);\n          return;\n        }\n\n        if (message.type === \"cypress_hook_end\") {\n          const fixtureUuid = runContext.executables.pop()!;\n\n          this.allureRuntime.updateFixture(fixtureUuid, (r) => {\n            r.status = message.data.status;\n            r.stop = message.data.stop;\n\n            if (message.data.statusDetails) {\n              r.statusDetails = message.data.statusDetails;\n            }\n          });\n          this.allureRuntime.stopFixture(fixtureUuid);\n        }\n      });\n    }\n\n    this.allureRuntime.writeScope(runContext.scopes.pop()!);\n  }\n}\n\nexport const allureCypress = (on: Cypress.PluginEvents, allureConfig?: AllureCypressConfig) => {\n  const allureCypressReporter = new AllureCypress(allureConfig);\n\n  allureCypressReporter.attachToCypress(on);\n\n  on(\"after:run\", (results) => {\n    allureCypressReporter.endRun(results as CypressCommandLine.CypressRunResult);\n  });\n\n  return allureCypressReporter;\n};\n"],"mappings":"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","ignoreList":[]}